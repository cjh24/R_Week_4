if (!state %in% stateLevels){
stop("invalid state")
}
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#subset for State attribute
allState <- outcomeCSV[which(outcomeCSV$State == state),]
#sort state subset by outcome then by Hospital.Name alpha a-z
allState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
tapply(subState[,outcomeCol],stateLevels,min)
tapply(allState[,outcomeCol],stateLevels,min)
#subset for State attribute
allState <- outcomeCSV[which(outcomeCSV$State == state),]
#sort state subset by outcome then by Hospital.Name alpha a-z
allState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
outcome <- "heart attack"
num <- 1
#load heathcare.gov outcomes data
outcomeCSV <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(outcomeCSV[, 11] <- as.numeric(outcomeCSV[, 11]))        #coerce heart attack to numeric
suppressWarnings(outcomeCSV[, 17] <- as.numeric(outcomeCSV[, 17]))        #coerce heart failure to numeric
suppressWarnings(outcomeCSV[, 23] <- as.numeric(outcomeCSV[, 23]))        #coerce pneumonia to numeric
#First check outcome for validity
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop("invalid outcome")
}
#Create vector of all States
stateLevels <- levels(factor(outcomeCSV$State))
#Then check state for validity
if (!state %in% stateLevels){
stop("invalid state")
}
#Now begin the actual work
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#sort outcomeCSV by state and outcome then by Hospital.Name alpha a-z
allState <- outcomeCSV[order(State, outcomeCSV[,outcomeCol], Hospital.Name),]
#sort outcomeCSV by state and outcome then by Hospital.Name alpha a-z
allState <- outcomeCSV[order(outcomeCSV$State, outcomeCSV[,outcomeCol], outcomeCSV$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
tapply(allState[,outcomeCol],stateLevels,min)
tapply(allState[,outcomeCol],outcomeCSV$State,min)
tapply(allState[,outcomeCol],outcomeCSV$State,min, simplify = TRUE)
tapply(allState[,outcomeCol],outcomeCSV$State,min(...,na.rm = TRUE), simplify = TRUE)
tapply(allState[,outcomeCol],outcomeCSV$State,min,na.rm = TRUE, simplify = TRUE)
allState[num, "Hospital.Name"]
results <- data.frame(hospital= character(), state= character())
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == state),]
for (state in seq_along(stateLevels)) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == state),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
subState[num, c("Hospital.Name", "State"]
}
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
subState[num, c("Hospital.Name", "State"]
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
for (state in seq_along(stateLevels)) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == state),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
subState[num, c("Hospital.Name", "State")]
}
for (state in seq_along(stateLevels)) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == state),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
rbind(results, subState[num, c("Hospital.Name", "State")] )
}
results
for (state in seq_along(stateLevels)) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == state),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State")] )
}
results
for (ST in seq_along(stateLevels)) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State")] )
}
results
seq_along(stateLevels)
for (ST) {
for (ST along stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State")] )
}
for (ST in stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State")] )
}
results
seq_along(stateLevels)
outcome <- "heart attack"
num <- 1
#load heathcare.gov outcomes data
outcomeCSV <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(outcomeCSV[, 11] <- as.numeric(outcomeCSV[, 11]))        #coerce heart attack to numeric
suppressWarnings(outcomeCSV[, 17] <- as.numeric(outcomeCSV[, 17]))        #coerce heart failure to numeric
suppressWarnings(outcomeCSV[, 23] <- as.numeric(outcomeCSV[, 23]))        #coerce pneumonia to numeric
#First check outcome for validity
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop("invalid outcome")
}
#Create vector of all States
stateLevels <- levels(factor(outcomeCSV$State))
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
for (ST in stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State")] )
}
results
for (ST in stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State"), rowname = ST] )
}
rownames(results) <- stateLevels
results
rankall <- function(outcome, num = "best") {
#load heathcare.gov outcomes data
outcomeCSV <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(outcomeCSV[, 11] <- as.numeric(outcomeCSV[, 11]))        #coerce heart attack to numeric
suppressWarnings(outcomeCSV[, 17] <- as.numeric(outcomeCSV[, 17]))        #coerce heart failure to numeric
suppressWarnings(outcomeCSV[, 23] <- as.numeric(outcomeCSV[, 23]))        #coerce pneumonia to numeric
#First check outcome for validity
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop("invalid outcome")
}
#Create vector of all States
stateLevels <- levels(factor(outcomeCSV$State))
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
for (ST in stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, subState[num, c("Hospital.Name", "State")] )
}
rownames(results) <- stateLevels
results
}
head(rankall("heart attack", 20), 10)
#hospital state
#AK <NA> AK
#AL D W MCMILLAN MEMORIAL HOSPITAL AL
#AR ARKANSAS METHODIST MEDICAL CENTER AR
#AZ JOHN C LINCOLN DEER VALLEY HOSPITAL AZ
#CA SHERMAN OAKS HOSPITAL CA
#CO SKY RIDGE MEDICAL CENTER CO
#CT MIDSTATE MEDICAL CENTER CT
#DC <NA> DC
#DE <NA> DE
#FL SOUTH FLORIDA BAPTIST HOSPITAL FL
source(rankall.R)
head(rankall("heart attack", 20), 10)
getwd()
source(rankall.R)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
outcome <- "heart attack"
num <- 20
#load heathcare.gov outcomes data
outcomeCSV <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(outcomeCSV[, 11] <- as.numeric(outcomeCSV[, 11]))        #coerce heart attack to numeric
suppressWarnings(outcomeCSV[, 17] <- as.numeric(outcomeCSV[, 17]))        #coerce heart failure to numeric
suppressWarnings(outcomeCSV[, 23] <- as.numeric(outcomeCSV[, 23]))        #coerce pneumonia to numeric
#First check outcome for validity
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop("invalid outcome")
}
#Create vector of all States
stateLevels <- levels(factor(outcomeCSV$State))
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
for (ST in stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, c(subState[num, "Hospital.Name"], ST))
}
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
ST = "AK"
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, c(subState[num, "Hospital.Name"], ST))
View(results)
results <- data.frame(hospital= character(), state= character())
ST = "AK" #################################################################3
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
c(subState[num, "Hospital.Name"], ST)
results <- rbind(results, hospital=subState[num, "Hospital.Name"], state=ST))
results <- rbind(results, hospital=subState[num, "Hospital.Name"], state=ST)
results <- data.frame(hospital= character(), state= character())
results <- rbind(results, hospital=subState[num, "Hospital.Name"], state=ST)
results <- data.frame(hospital= character(), state= character())
View(results)
results <- rbind(results, data.frame(hospital=subState[num, "Hospital.Name"], state=ST))
View(results)
outcome <- "heart attack"
num <- 20
#load heathcare.gov outcomes data
outcomeCSV <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(outcomeCSV[, 11] <- as.numeric(outcomeCSV[, 11]))        #coerce heart attack to numeric
suppressWarnings(outcomeCSV[, 17] <- as.numeric(outcomeCSV[, 17]))        #coerce heart failure to numeric
suppressWarnings(outcomeCSV[, 23] <- as.numeric(outcomeCSV[, 23]))        #coerce pneumonia to numeric
#First check outcome for validity
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop("invalid outcome")
}
#Create vector of all States
stateLevels <- levels(factor(outcomeCSV$State))
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
for (ST in stateLevels) {
ST = "AK" #################################################################3
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, data.frame(hospital=subState[num, "Hospital.Name"], state=ST))
}
rownames(results) <- stateLevels
results
outcome <- "heart attack"
num <- 20
#load heathcare.gov outcomes data
outcomeCSV <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(outcomeCSV[, 11] <- as.numeric(outcomeCSV[, 11]))        #coerce heart attack to numeric
suppressWarnings(outcomeCSV[, 17] <- as.numeric(outcomeCSV[, 17]))        #coerce heart failure to numeric
suppressWarnings(outcomeCSV[, 23] <- as.numeric(outcomeCSV[, 23]))        #coerce pneumonia to numeric
#First check outcome for validity
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop("invalid outcome")
}
#Create vector of all States
stateLevels <- levels(factor(outcomeCSV$State))
#set metric column number
if (outcome == "heart attack"){
outcomeCol <- 11
} else if (outcome == "heart failure"){
outcomeCol <- 17
} else if (outcome == "pneumonia"){
outcomeCol <- 23
}
#create dataframe for results
results <- data.frame(hospital= character(), state= character())
for (ST in stateLevels) {
#subset for State attribute
subState <- outcomeCSV[which(outcomeCSV$State == ST),]
#sort state subset by outcome then by Hospital.Name alpha a-z
subState <- subState[order(subState[,outcomeCol], subState$Hospital.Name),]
#evaluate num and coerce as needed
if (num == "best") {
num <- as.integer(1)
} else if (num == "worst") {
num <- as.integer(which.max(subState[,outcomeCol]))
} else {
num <- as.integer(num)
}
#return first hospital in with the requested rank for the given outcome and state
results <- rbind(results, data.frame(hospital=subState[num, "Hospital.Name"], state=ST))
}
rownames(results) <- stateLevels
results
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit(0)
